name: 🚀 Build & Deploy Blog to Cloudflare

on:
    push:
        branches: [main]
        paths:
            - "docs/**"
            - "package.json"
            - "package-lock.json"
            - "vocs.config.ts"
            - "vocs.config.js"

    # Allow manual triggering
    workflow_dispatch:

jobs:
    build-and-deploy:
        runs-on: ubuntu-latest

        steps:
            - name: 📥 Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: 🟢 Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "24"
                  cache: "npm"

            - name: 📦 Install dependencies
              run: |
                  echo "📦 Installing dependencies..."
                  npm ci
                  echo "✅ Dependencies installed!"

            - name: 🔍 Check for new grant posts
              id: check-grants
              run: |
                  echo "🔍 Checking for new grant posts..."
                  if [ -d "docs/pages/grants" ]; then
                    GRANT_COUNT=$(find docs/pages/grants -name "*.mdx" | wc -l)
                    echo "📊 Found $GRANT_COUNT grant posts"
                    echo "grant_count=$GRANT_COUNT" >> $GITHUB_OUTPUT
                  else
                    echo "📁 No grants directory found"
                    echo "grant_count=0" >> $GITHUB_OUTPUT
                  fi

            - name: 🔄 Regenerate blog index
              run: |
                  echo "🔄 Regenerating blog index..."
                  if [ -f "docs/scripts/regenerate-index.js" ]; then
                    node docs/scripts/regenerate-index.js
                    echo "✅ Blog index regenerated!"
                  else
                    echo "⚠️  No regenerate script found, skipping..."
                  fi

            - name: 📝 Check Vocs config
              run: |
                  echo "📝 Checking Vocs configuration..."
                  if [ -f "vocs.config.tsx" ]; then
                    echo "✅ Found vocs.config.tsx"
                  elif [ -f "vocs.config.js" ]; then
                    echo "✅ Found vocs.config.js"
                  else
                    echo "⚠️  No vocs config found, using defaults"
                  fi

            - name: 🔨 Build Vocs project
              run: |
                  echo "🔨 Building Vocs project..."
                  echo "📁 Current directory contents:"
                  ls -la

                  echo "📦 Package.json scripts:"
                  cat package.json | grep -A 10 '"scripts"'

                  echo "🚀 Running build..."
                  npm run build

                  echo "✅ Build completed!"
                  echo "📁 Dist directory contents:"
                  ls -la docs/dist/ || echo "❌ No dist directory found"

            - name: 🌐 Deploy to Cloudflare Pages
              uses: cloudflare/wrangler-action@v3
              with:
                  apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
                  accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
                  command: pages deploy docs/dist --project-name=${{ secrets.CLOUDFLARE_PROJECT_NAME }}
                  gitHubToken: ${{ secrets.BLOG_PUBLISH_TOKEN }}

            - name: 📝 Commit new blog content
              run: |
                  echo "📝 Committing new blog content..."
                  git config --local user.email "blog-publisher@voltade.com"
                  git config --local user.name "Blog Publisher Bot"

                  # Add the blog files
                  git add docs/pages/grants/
                  git add review-dashboard/public/blog_drafts/

                  # Check if there are changes to commit
                  if git diff --staged --quiet; then
                    echo "ℹ️ No changes to commit"
                    exit 0
                  fi

                  # Commit the changes
                  COMMIT_MSG="📝 Add new blog post: ${{ github.event.client_payload.blog_title || 'Auto-generated blog content' }}"
                  git commit -m "$COMMIT_MSG"
                  echo "✅ Changes committed locally"

            - name: 🔄 Sync with remote before pushing
              run: |
                  echo "🔄 Syncing with remote before push..."

                  # Fetch latest remote changes
                  git fetch origin main

                  # Check if remote has new commits
                  LOCAL_COMMIT=$(git rev-parse HEAD)
                  REMOTE_COMMIT=$(git rev-parse origin/main)

                  if [ "$LOCAL_COMMIT" = "$REMOTE_COMMIT" ]; then
                    echo "✅ No remote changes - ready to push"
                  else
                    echo "🔄 Remote has new changes - syncing..."
                    
                    # Try to rebase our commit on top of remote changes
                    if git rebase origin/main; then
                      echo "✅ Successfully rebased local commits onto remote"
                    else
                      echo "⚠️ Rebase failed - trying merge strategy..."
                      git rebase --abort
                      
                      # Try merge instead
                      if git merge origin/main --no-edit; then
                        echo "✅ Successfully merged remote changes"
                      else
                        echo "❌ Merge failed - handling conflicts..."
                        
                        # For blog workflows, we usually want to keep both changes
                        # Check for conflicts and resolve automatically where possible
                        git status --porcelain | grep "^UU" | while read status file; do
                          echo "🔧 Auto-resolving conflict in: $file"
                          # For markdown files, we can often just accept both changes
                          git add "$file"
                        done
                        
                        # Complete the merge
                        if git diff --staged --quiet; then
                          echo "❌ Unable to auto-resolve conflicts"
                          git merge --abort
                          echo "⚠️ Manual intervention required"
                          exit 1
                        else
                          git commit --no-edit -m "🔀 Merge remote changes with local blog updates"
                          echo "✅ Conflicts resolved and merged"
                        fi
                      fi
                    fi
                  fi

            - name: 🚀 Push to remote with retry logic
              run: |
                  echo "🚀 Pushing changes to remote..."

                  RETRY_COUNT=0
                  MAX_RETRIES=3

                  while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
                    RETRY_COUNT=$((RETRY_COUNT + 1))
                    echo "📤 Push attempt $RETRY_COUNT of $MAX_RETRIES"
                    
                    if git push origin main; then
                      echo "✅ Successfully pushed to remote"
                      break
                    else
                      echo "⚠️ Push failed (attempt $RETRY_COUNT)"
                      
                      if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                        echo "🔄 Fetching latest changes and retrying..."
                        
                        # Fetch and check for new changes
                        git fetch origin main
                        
                        # If remote moved ahead, sync again
                        if ! git merge-base --is-ancestor origin/main HEAD; then
                          echo "🔄 Remote has moved ahead - syncing again..."
                          
                          if git rebase origin/main; then
                            echo "✅ Rebased onto latest remote changes"
                          else
                            echo "⚠️ Rebase failed - trying merge..."
                            git rebase --abort
                            git merge origin/main --no-edit || {
                              echo "❌ Merge failed on retry"
                              git merge --abort
                              exit 1
                            }
                          fi
                        fi
                        
                        # Wait before retry
                        sleep $((RETRY_COUNT * 2))
                      else
                        echo "❌ Max retries exceeded - push failed"
                        echo "🔍 Repository state:"
                        git status --short
                        git log --oneline -3
                        exit 1
                      fi
                    fi
                  done

            - name: ✅ Verify push success
              run: |
                  echo "✅ Verifying push was successful..."

                  # Fetch to get latest remote state
                  git fetch origin main

                  # Compare local and remote commits
                  LOCAL_COMMIT=$(git rev-parse HEAD)
                  REMOTE_COMMIT=$(git rev-parse origin/main)

                  if [ "$LOCAL_COMMIT" = "$REMOTE_COMMIT" ]; then
                    echo "🎉 Push verification successful!"
                    echo "📊 Blog publishing completed:"
                    echo "   Latest commit: $LOCAL_COMMIT"
                    echo "   Commit message: $(git log -1 --pretty=format:'%s')"
                    echo "   Files changed: $(git diff HEAD~1 --name-only | wc -l)"
                  else
                    echo "❌ Push verification failed!"
                    echo "   Local:  $LOCAL_COMMIT"
                    echo "   Remote: $REMOTE_COMMIT"
                    exit 1
                  fi

            - name: 🎉 Deployment success
              run: |
                  echo "🎉 Deployment completed successfully!"
                  echo "📊 Grant posts: ${{ steps.check-grants.outputs.grant_count }}"
                  echo "🌐 Your blog should be live at your Cloudflare domain!"

            - name: 📧 Notify on failure
              if: failure()
              run: |
                  echo "❌ Deployment failed!"
                  echo "Check the logs above for more details."
